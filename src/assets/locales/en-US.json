{
  "title": "Deadlock Modelling",
  "menuGuideLabel" : "Guide",
  "menuSandboxLabel" : "Sandbox",
  "previousLabel" : "Previous",
  "backToGuideLabel" : "Back to Guide Mode",
  "nextLabel" : "Next",
  "finishLabel" : "Finish",
  "guide": {
    "title": "Guided Simulation",
    "instruction": {
      "0" : "<strong>A</strong>, <strong>B</strong> and <strong>C</strong> are <em>processes<em>",
      "1" : "<strong>X</strong>, <strong>Y</strong> and <strong>Z</strong> are <em>resources<em>",
      "2" : "Edges from <strong>processes</strong> to <strong>resources</strong> are <strong>requests</strong> for resources by processes",
      "3" : "Edges from <strong>resources</strong> to <strong>processes</strong> are <strong>ownerships</strong> of resources by processes",
      "4" : "Now imagine a situation with <strong>three</strong> <em>processes</em> and <strong>three</strong> <em>resources</em>",
      "5" : "<ol><li>A requests X</li></ol>",
      "6" : "<ol><li>A requests X</li><li>Now A owes X</li></ol>",
      "7" : "<ol><li>A requests X</li><li>Now A owes X</li><li>B and C request Y and Z, respectively</li></ol>",
      "8" : "<ol><li>A requests X</li><li>Now A owes X</li><li>B and C request Y and Z, respectively</li><li>B and C owe Y and Z, respectively</li></ol>",
      "9" : "<ol><li>A requests X</li><li>Now A owes X</li><li>B and C request Y and Z, respectively</li><li>B and C owe Y and Z, respectively</li><li>A requests Y, notice A has to wait for B to release Y</li></ol>",
      "10": "<ol><li>A requests X</li><li>Now A owes X</li><li>B and C request Y and Z, respectively</li><li>B and C owe Y and Z, respectively</li><li>A requests Y, notice A has to wait for B to release Y</li><li>B requests Z, notice how A and B have to wait for another process</li></ol>",
      "11": "<ol><li>A requests X</li><li>Now A owes X</li><li>B and C request Y and Z, respectively</li><li>B and C owe Y and Z, respectively</li><li>A requests Y, notice A has to wait for B to release Y</li><li>B requests Z, notice how A and B have to wait for another process</li><li>Now, if C reqests X a cycle uccurs, therefore, a <strong>deadlock</strong></li></ol><p>Notice how A is waiting for B to finish that is waiting for C that is waiting for A, thus none finish. This condition is a deadlock.</p>",
      "12": "In concurrent programming the order of requests is very important to determine whether a deadlock will occur or not, as it can be seen in the next example.",
      "13": "<ol><li>A requests X</li></ol>",
      "14": "<ol><li>A requests X</li><li>Now a owes X</li></ol>",
      "15": "<ol><li>A requests X</li><li>Now a owes X</li><li>A requests Y</li></ol>",
      "16": "<ol><li>A requests X</li><li>Now a owes X</li><li>A requests Y</li><li>Now A owes Y</li></ol>",
      "17": "<ol><li>A requests X</li><li>Now a owes X</li><li>A requests Y</li><li>Now A owes Y</li><li>B requests Y, but B must wait for A to release Y</li></ol>",
      "18": "<ol><li>A requests X</li><li>Now a owes X</li><li>A requests Y</li><li>Now A owes Y</li><li>B requests Y, but B must wait for A to release Y</li><li>A owes all the resources it needs, so it uses and releases them</li></ol>",
      "19": "<ol><li>A requests X</li><li>Now a owes X</li><li>A requests Y</li><li>Now A owes Y</li><li>B requests Y, but B must wait for A to release Y</li><li>A owes all the resources it needs, so it uses and releases them</li><li>B owes Y, released by A</li></ol>",
      "20": "<ol><li>A requests X</li><li>Now a owes X</li><li>A requests Y</li><li>Now A owes Y</li><li>B requests Y, but B must wait for A to release Y</li><li>A owes all the resources it needs, so it uses and releases them</li><li>B owes Y, released by A</li><li>B requests Z</li></ol>",
      "21": "<ol><li>A requests X</li><li>Now a owes X</li><li>A requests Y</li><li>Now A owes Y</li><li>B requests Y, but B must wait for A to release Y</li><li>A owes all the resources it needs, so it uses and releases them</li><li>B owes Y, released by A</li><li>B requests Z</li><li>B owes Z</li></ol>",
      "22": "<ol><li>A requests X</li><li>Now a owes X</li><li>A requests Y</li><li>Now A owes Y</li><li>B requests Y, but B must wait for A to release Y</li><li>A owes all the resources it needs, so it uses and releases them</li><li>B owes Y, released by A</li><li>B requests Z</li><li>B owes Z</li><li>B owes all the resources it needs, so it uses and releases them</li></ol>",
      "23": "<ol><li>A requests X</li><li>Now a owes X</li><li>A requests Y</li><li>Now A owes Y</li><li>B requests Y, but B must wait for A to release Y</li><li>A owes all the resources it needs, so it uses and releases them</li><li>B owes Y, released by A</li><li>B requests Z</li><li>B owes Z</li><li>B owes all the resources it needs, so it uses and releases them</li><li>C requests the resources Z and X</li></ol>",
      "24": "<ol><li>A requests X</li><li>Now a owes X</li><li>A requests Y</li><li>Now A owes Y</li><li>B requests Y, but B must wait for A to release Y</li><li>A owes all the resources it needs, so it uses and releases them</li><li>B owes Y, released by A</li><li>B requests Z</li><li>B owes Z</li><li>B owes all the resources it needs, so it uses and releases them</li><li>C requests the resources Z and X</li><li>C owes Z, released by B</li></ol>",
      "25": "<ol><li>A requests X</li><li>Now a owes X</li><li>A requests Y</li><li>Now A owes Y</li><li>B requests Y, but B must wait for A to release Y</li><li>A owes all the resources it needs, so it uses and releases them</li><li>B owes Y, released by A</li><li>B requests Z</li><li>B owes Z</li><li>B owes all the resources it needs, so it uses and releases them</li><li>C requests the resources Z and X</li><li>C owes Z, released by B</li><li>C owes all the resources it needs, so it uses and releases them</li></ol>",
      "26": "<p>In the case no deadlock uccured due to the order of the ownerships attribution.</p>"
    }
  },
  "sandbox": {
    "title": "Free Simulation",
    "ok": "There are no deadlocks",
    "dead": "There are deadlocks"
  }
}