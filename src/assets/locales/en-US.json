{
  "title": "Deadlock Modelling",
  "guideHowToUse" : "Navigate the guide clicking <strong>next</strong> and <strong>previous</strong>",
  "menuGuideLabel" : "Guided Simulation",
  "menuSandboxLabel" : "Free Simulation",
  "previousLabel" : "Previous",
  "backToGuideLabel" : "Back to Guide Mode",
  "nextLabel" : "Next",
  "finishLabel" : "Go to Free Simulation",
  "guide": {
    "title": "Guided Simulation",
    "instruction": {
      "0" : "<strong>A</strong>, <strong>B</strong> and <strong>C</strong> are <em>processes<em>",
      "1" : "<strong>1</strong>, <strong>2</strong> and <strong><strong>3</strong> </strong> are <em>resources<em>",
      "2" : "Edges from <strong>processes</strong> to <strong>resources</strong> are <strong>requests</strong> for resources by processes",
      "3" : "Edges from <strong>resources</strong> to <strong>processes</strong> are <strong>ownerships</strong> of resources by processes",
      "4" : "Now imagine a situation with <strong>three</strong> <em>processes</em> and <strong>three</strong> <em>resources</em>",
      "5" : "<strong>A</strong> requests <strong>1</strong>",
      "6" : "Now <strong>A</strong> owns <strong>1</strong>",
      "7" : "<strong>B</strong> and <strong>C</strong> request <strong>2</strong> and <strong>3</strong>, respectively",
      "8" : "<strong>B</strong> and <strong>C</strong> own <strong>2</strong> and <strong>3</strong>, respectively",
      "9" : "<strong>A</strong> requests <strong>2</strong>, notice <strong>A</strong> has to wait for <strong>B</strong> to release <strong>2</strong>",
      "10": "<strong>B</strong> requests <strong>3</strong>, notice how <strong>A</strong> and <strong>B</strong> have to wait for another process",
      "11": "<strong>C</strong> requests <strong>1</strong>, closing a cycle. Every process in it is waiting for a resource held by another inside the cycle, that makes a <strong>deadlock</strong>",
      "12": "In concurrent programming, the <strong>order of requests</strong> is very important. Look at what would happen if requests were made on a different order",
      "13": "<strong>A</strong> requests <strong>1</strong>",
      "14": "Now <strong>A</strong> owns <strong>1</strong>",
      "15": "<strong>A</strong> requests <strong>2</strong>",
      "16": "Now <strong>A</strong> owns <strong>2</strong>",
      "17": "<strong>B</strong> requests <strong>2</strong>, but <strong>B</strong> must wait for <strong>A</strong> to release <strong>2</strong>",
      "18": "<strong>A</strong> owns all the resources it needs, so it uses and releases them",
      "19": "<strong>B</strong> owns <strong>2</strong>, released by <strong>A</strong>",
      "20": "<strong>B</strong> requests <strong>3</strong> ",
      "21": "<strong>B</strong> owns <strong>3</strong> ",
      "22": "<strong>B</strong> owns all the resources it needs, so it uses and releases them",
      "23": "<strong>C</strong> requests the resources <strong>3</strong>  and <strong>1</strong>",
      "24": "<strong>C</strong> owns <strong>3</strong>, released by <strong>B</strong>, and <strong>1</strong> released by <strong>A</strong>",
      "25": "<strong>C</strong> owns all the resources it needs, so it uses and releases them",
      "26": "In this case no deadlock occurred due to the <strong>order</strong> of the ownerships attribution."
    }
  },
  "sandbox": {
    "title": "Free Simulation",
    "howToUse" : "<ul><li>Double click on the canvas to create a process</li><li>Ctrl + double click on the canvas to create a resource</li><li>Right click and hold on a process and release on a resource to create a request</li><li>Right click and hold on a resource and release on a process to attribute ownership</li><li>Double click on a process, a resource, a request or an ownership to delete it</ul>",
    "ok": "There is <strong>no</strong> deadlock",
    "dead": "There are processes in deadlock"
  }
}