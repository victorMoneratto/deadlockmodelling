{
  "title": "Deadlock Modelling",
  "menuGuideLabel" : "Guided Simulation",
  "menuSandboxLabel" : "Free Simulation",
  "previousLabel" : "Previous",
  "backToGuideLabel" : "Back to Guided Simulation",
  "nextLabel" : "Next",
  "finishLabel" : "Go to Free Simulation",
  "explanationTitle": "Explanation",
  "hideShowContentButton": "Hide/Show",
  "explanationContent": "<div class='row'><p>A set of processes are deadlocked if each process in the set is waiting for an event that only another process in the set can generate. How all the processes are waiting, none of the them can generate the event the other process needs. All the processes remain stuck, therefore deadlocked. A deadlock occurs whenever the following four conditions are met: </p><ol> <li> Mutual exclusion. </li> <li> Hold an wait. </li> <li> Non preeptive. </li> <li> Circular wait. </li> </ol> <p>Richard C. Holt showed how these conditions can be modeled using directed graphs. This OER was developed based on his model.</p><p>The OER has two simulations, the 'Guided Simulation' and 'Free Simulation'. The Guided Simulation will teach how processes, resources, requests and ownerships are represented in the model, and show examples step by step how deadlocks may or may not occur. The Free Simulation will allow the user to create his own states and see if a deadlock will occur</p> </div>",
  "guide": {
    "title": "Guided Simulation",
    "guideHowToUse" : "Navigate the guide clicking <strong>next</strong> and <strong>previous</strong>",
    "instruction": {
      "0" : "<strong>A</strong>, <strong>B</strong> and <strong>C</strong> are <em>processes<em>",
      "1" : "<strong>1</strong>, <strong>2</strong> and <strong><strong>3</strong> </strong> are <em>resources<em>",
      "2" : "Edges from <strong>processes</strong> to <strong>resources</strong> are <strong>requests</strong> for resources by processes",
      "3" : "Edges from <strong>resources</strong> to <strong>processes</strong> are <strong>ownerships</strong> of resources by processes",
      "4" : "Now imagine a situation with <strong>three</strong> <em>processes</em> and <strong>three</strong> <em>resources</em>",
      "5" : "<strong>A</strong> requests <strong>1</strong>",
      "6" : "Now <strong>A</strong> owns <strong>1</strong>",
      "7" : "<strong>B</strong> and <strong>C</strong> request <strong>2</strong> and <strong>3</strong>, respectively",
      "8" : "<strong>B</strong> and <strong>C</strong> own <strong>2</strong> and <strong>3</strong>, respectively",
      "9" : "<strong>A</strong> requests <strong>2</strong>, notice <strong>A</strong> has to wait for <strong>B</strong> to release <strong>2</strong>",
      "10": "<strong>B</strong> requests <strong>3</strong>, notice how <strong>A</strong> and <strong>B</strong> have to wait for another process",
      "11": "<strong>C</strong> requests <strong>1</strong>, closing a cycle. Every process in it is waiting for a resource held by another inside the cycle, that makes a <strong>deadlock</strong>",
      "12": "In concurrent programming, the <strong>order of requests</strong> is very important. Look at what would happen if requests were made on a different order",
      "13": "<strong>A</strong> requests <strong>1</strong>",
      "14": "Now <strong>A</strong> owns <strong>1</strong>",
      "15": "<strong>A</strong> requests <strong>2</strong>",
      "16": "Now <strong>A</strong> owns <strong>2</strong>",
      "17": "<strong>B</strong> requests <strong>2</strong>, but <strong>B</strong> must wait for <strong>A</strong> to release <strong>2</strong>",
      "18": "<strong>A</strong> owns all the resources it needs, so it uses and releases them",
      "19": "<strong>B</strong> owns <strong>2</strong>, released by <strong>A</strong>",
      "20": "<strong>B</strong> requests <strong>3</strong> ",
      "21": "<strong>B</strong> owns <strong>3</strong> ",
      "22": "<strong>B</strong> owns all the resources it needs, so it uses and releases them",
      "23": "<strong>C</strong> requests the resources <strong>3</strong>  and <strong>1</strong>",
      "24": "<strong>C</strong> owns <strong>3</strong>, released by <strong>B</strong>, and <strong>1</strong> released by <strong>A</strong>",
      "25": "<strong>C</strong> owns all the resources it needs, so it uses and releases them",
      "26": "In this case no deadlock occurred due to the <strong>order</strong> of the ownerships attribution."
    }
  },
  "sandbox": {
    "title": "Free Simulation",
    "howToUse":  "<ul class=\"list-inline text-center\"><li><kbd>Double Click</kbd>: create process</li><li><kbd>Ctrl+Double Click</kbd>: create resource</li><li><kbd>Drag Right Button</kbd>: connect nodes</li><li><kbd>Double Click</kbd>: delete element</li></ul>",
    "ok": "There is <strong>no</strong> deadlock",
    "dead": "There are processes in deadlock"
  }
}